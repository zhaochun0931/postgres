Indexing significantly impacts the query performance and overall efficiency.




1. B-tree Indexing
This is a default indexing technique in PostgreSQL, optimized for data that can be sorted, such as numbers or text. It suitable for range queries and generalpurpose indexing.



2. Hash Indexing
This is an indexing method that uses hash functions, optimized for equality comparisons. It is considered ideal for queries that involve exact matches on indexed columns.


3. GiST Indexing (Generalized Search Tree)
This one supports complex data types and custom search algorithms. It is very useful for geometric shapes, text search, and other complex data types.


4. SP-GiST Indexing (Space-Partitioned Generalized Search Tree)
This one is primarily optimized for spatial data and other partitioned datasets. And it is found to be very effective for spatial indexing and hierarchical data.


5. GIN Indexing (Generalized Inverted Index)


6. BRIN Indexing (Block Range INdex)







-- Create a new table for testing
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name TEXT,
    age INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert 1 million rows using generate_series
INSERT INTO test_table (name, age)
SELECT
    'name_' || gs,
    (gs % 100) + 18 -- age between 18 and 117
FROM generate_series(1, 1000000) gs;





-- Test query performance before indexing
EXPLAIN ANALYZE 
SELECT * FROM test_table WHERE age = 25;








-- Create an index on the age column
CREATE INDEX idx_age ON test_table (age);


-- Test query performance after indexing
EXPLAIN ANALYZE 
SELECT * FROM test_table WHERE age = 25;






