mkdir -p ./pgssl/{server,client}




cd pgssl



🪪 Step 1 — Create a Root Certificate Authority (CA)

This CA will sign both the server and client certs.

openssl req -new -x509 -days 365 -nodes \
  -subj "/CN=pg-ca" \
  -keyout ca.key -out ca.crt







🖥️ Step 2 — Create the Server Certificate

openssl req -new -nodes \
  -subj "/CN=pg-server" \
  -keyout server/server.key -out server/server.csr

openssl x509 -req -in server/server.csr \
  -CA ca.crt -CAkey ca.key -CAcreateserial \
  -out server/server.crt -days 365

chmod 600 server/server.key











👩‍💻 Step 3 — Create the Client Certificate

openssl req -new -nodes \
  -subj "/CN=pg-client" \
  -keyout client/client.key -out client/client.csr

openssl x509 -req -in client/client.csr \
  -CA ca.crt -CAkey ca.key -CAcreateserial \
  -out client/client.crt -days 365

chmod 600 client/client.key






pgssl
    ├── ca.crt
    ├── ca.key
    ├── ca.srl
    ├── client
    │   ├── client.crt
    │   ├── client.csr
    │   └── client.key
    └── server
        ├── server.crt
        ├── server.csr
        └── server.key




















PostgreSQL does two main checks:

✅ Server certificate is trusted (signed by the CA in root.crt)

✅ If pg_hba.conf requires cert clientcert=1, it validates the client certificate:

It must be signed by the same CA.

The certificate’s Common Name (CN) must match a PostgreSQL role name.

So if your client cert has:

Subject: CN=pg-client


then you must create a role:

CREATE ROLE "pg-client" LOGIN;


After that, connection succeeds without a password, because the cert itself proves the identity.











docker exec -it pg-server psql -U admin -d testdb



# The PostgreSQL role name must match the CN (Common Name) in the client certificate


openssl x509 -in client.crt -noout -subject


$ openssl x509 -in client.crt -noout -subject
subject=CN=pg-client
$


CREATE ROLE "pg-client" LOGIN;

















psql -h postgres -U admin -d testdb


SELECT usename, passwd FROM pg_shadow;



testdb=# SELECT usename, passwd FROM pg_shadow;
-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------
usename | admin
passwd  | SCRAM-SHA-256$4096:BWCk0c3BVRMO+oNJrOH5FQ==$QJxBkNgFsSaWtILkNZTbD/Mi8GyiukuJH/OOX7/ksRg=:5UdYsZ/7Jtlbr3mTGV/s4Gg0z8h6qZq9rzKlToXAZro=

testdb=#








1️⃣ Why it’s stored as SCRAM even for md5user

  PostgreSQL ≥10 automatically stores passwords in SCRAM-SHA-256 format when the user is created if the database cluster defaults to SCRAM.
  
  The pg_hba.conf setting (md5 vs scram-sha-256) does not retroactively change the stored password.
  
  pg_hba.conf only controls which authentication method is required for incoming connections, not how passwords are stored.








docker exec -it pg-client bash

psql "host=pg-server dbname=testdb user=pg-client sslmode=verify-full sslrootcert=/root/.postgresql/root.crt"



root@pg-client:~# psql "host=pg-server dbname=testdb user=pg-client sslmode=verify-full sslrootcert=/root/.postgresql/root.crt"
psql (15.14 (Debian 15.14-1.pgdg13+1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, compression: off)
Type "help" for help.

testdb=>
testdb=> \conninfo
You are connected to database "testdb" as user "pg-client" on host "pg-server" (address "172.31.0.2") at port "5432".
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, compression: off)
testdb=>
testdb=>
testdb=>

