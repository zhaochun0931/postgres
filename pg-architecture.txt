The PostgreSQL disk layout

├── base
├── global
├── pg_commit_ts
├── pg_dynshmem
├── pg_hba.conf
├── pg_ident.conf
├── pg_logical
├── pg_multixact
├── pg_notify
├── pg_replslot
├── pg_serial
├── pg_snapshots
├── pg_stat
├── pg_stat_tmp
├── pg_subtrans
├── pg_tblspc
├── pg_twophase
├── PG_VERSION
├── pg_wal
├── pg_xact
├── postgresql.auto.conf
└── postgresql.conf




base - the actual data directory, PGDATA,  initdb utility to initialize a new database cluster and create this base directory

It actually contains the real data (that is, tables, indexes, and so on). Inside the base directory, each database will have its own subdirectory




SELECT oid, datname FROM pg_database;


postgres=# SELECT oid, datname FROM pg_database;
  oid  |  datname
-------+-----------
 13720 | postgres
     1 | template1
 19038 | testdb
 13719 | template0
(4 rows)

postgres=#



In PostgreSQL, each table is related to (at least) one data file.

SELECT relname, oid, relfilenode FROM pg_class WHERE relname = 'table_name';

testdb=# SELECT relname, oid, relfilenode FROM pg_class WHERE relname = 'student';
 relname |  oid  | relfilenode
---------+-------+-------------
 student | 19039 |       16384
(1 row)

testdb=#



SELECT pg_relation_filepath('student');

testdb=# SELECT pg_relation_filepath('student');
 pg_relation_filepath
----------------------
 base/19038/16385
(1 row)

testdb=#




The relfilenode values of tables and indexes can be changed by issuing certain commands, such as TRUNCATE, REINDEX, CLUSTER. 

testdb=# truncate student;
TRUNCATE TABLE
testdb=# SELECT relname, oid, relfilenode FROM pg_class WHERE relname = 'student';
 relname |  oid  | relfilenode
---------+-------+-------------
 student | 19039 |       16385
(1 row)

testdb=#







As soon as the table is created, PostgreSQL will create an empty file on the disk:

$ ls -al /var/lib/postgresql/17/main/base/16389/16390
-rw------- 1 postgres postgres 0 Dec 14 03:16 /var/lib/postgresql/17/main/base/16389/16390
$

$ file /var/lib/postgresql/17/main/base/16389/16390
/var/lib/postgresql/17/main/base/16389/16390: data
$


$ pg_filedump /var/lib/postgresql/17/main/base/16389/16390

*******************************************************************
* PostgreSQL File/Block Formatted Dump Utility
*
* File: /var/lib/postgresql/17/main/base/16389/16390
* Options used: None
*******************************************************************

Block    0 ********************************************************
<Header> -----
 Block Offset: 0x00000000         Offsets: Lower      36 (0x0024)
 Block: Size 8192  Version    4            Upper    8096 (0x1fa0)
 LSN:  logid      0 recoff 0x01d66048      Special  8192 (0x2000)
 Items:    3                      Free Space: 8060
 Checksum: 0x0000  Prune XID: 0x00000000  Flags: 0x0000 ()
 Length (including item array): 36

<Data> -----
 Item   1 -- Length:   28  Offset: 8160 (0x1fe0)  Flags: NORMAL
 Item   2 -- Length:   28  Offset: 8128 (0x1fc0)  Flags: NORMAL
 Item   3 -- Length:   28  Offset: 8096 (0x1fa0)  Flags: NORMAL


*** End of File Encountered. Last Block Read: 0 ***
$







global - the global data
The global directory will contain the global system tables. This directory is small.








pg_hba.conf - host-based network configuration
The pg_hba.conf file configures the PostgreSQL's internal firewall and represents one of the two most important configuration files in a PostgreSQL cluster.



pg_ident.conf - ident authentication
The pg_ident.conf file can be used in conjunction with the pg_hba.conf file to configure ident authentication.



postgresql.conf - the central PostgreSQL configuration file
Finally, there is the main PostgreSQL configuration file. All configuration parameters can be changed in postgresql.conf




If you happen to use prebuilt binaries, you might not find postgresql.conf directly inside your data directory. It is more likely to be located in some subdirectory of /etc/ (on Linux/Unix). The precise location is highly dependent on the type of operating system you are using. The typical location of data directories is /var/lib/pgsql/data, but postgresql.conf is often located under /etc/postgresql/9.X/main/postgresql.conf (as in Ubuntu and similar systems), or under /etc directly.



default two tablespaces to stores all system data.
- pg_default
- pg_global


postgres=# \db
       List of tablespaces
    Name    |  Owner   | Location
------------+----------+----------
 pg_default | postgres |
 pg_global  | postgres |
(2 rows)

postgres=#





table
Tables form the building block of relational-database storage.



index




ctid

in PostgreSQL, ctid is a special system column that exists in every table. It uniquely identifies the physical location of a row in a table. Each row in a table is stored in a specific "tuple" (or row), and ctid indicates that specific row's location in the database storage.

The ctid consists of two components:
Block Number: The block (or page) number within the table where the row is stored.
Tuple Index: The position of the row within that block.

For example, ctid might look like (0, 1), which means the row is stored in block 0, and it's the first row in that block.

When a row is updated, PostgreSQL doesn't overwrite the old row but marks it as dead and writes a new row in a new location. ctid can be used to target the specific old or new row.

The ctid is typically used by PostgreSQL internally. For regular applications, it's usually better to use primary keys or unique constraints to identify rows.



SELECT relname AS table_name, n_dead_tup AS dead_tuples
FROM pg_stat_user_tables
WHERE n_dead_tup > 0;


DELETE FROM t1 WHERE ctid = '(0,2)';





xmin

in PostgreSQL, xmin is a system column that is used to track the transaction ID (XID) that inserted or last modified a row. It is a part of the internal Multi-Version Concurrency Control (MVCC) system that PostgreSQL uses to manage concurrent access to the database.


When a row is updated or deleted, the old row version is marked as a dead tuple, but its xmin (the original transaction ID) is preserved. This allows PostgreSQL to determine if the old row is still visible to any active transactions.





xmax

xmax is another system column in PostgreSQL, and it is closely related to xmin. While xmin tracks the transaction ID that inserted or last modified a row, xmax tracks the transaction ID that deleted the row or is responsible for marking the row as "deleted" in the context of Multi-Version Concurrency Control (MVCC).




