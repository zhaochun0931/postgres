# master

create user replication_user with replication password 'password';
SELECT * FROM pg_create_physical_replication_slot('replication_slot');


# This is calling the pg_create_physical_replication_slot() function, which is a built-in PostgreSQL function. It creates a physical replication slot with the name you provide as the argument—in this case, 'replication_slot'. The replication slot is used for logical or physical replication between PostgreSQL servers.

Physical replication: This means that PostgreSQL will replicate the exact byte-by-byte changes from one server to another (as opposed to logical replication, which replicates specific tables or databases). The name 'replication_slot' is just a placeholder here—you can name it whatever you like, as long as it’s unique.



psql -c 'SELECT * FROM pg_stat_replication;'












# slave


pg_basebackup -h 10.211.55.22 -p 5432 -D /data1 -U replication_user -Fp -Xs -P

rm -Rf /var/lib/postgresql/data/*; pg_basebackup -h db1 -p 5432 -D /var/lib/postgresql/data -U replication_user -Fp -Xs -P


touch /data1/standby.signal



# edit the postgresql.conf file on the slave to enable hot standby
hot_standby = on
primary_conninfo = 'host=10.211.55.22 port=5432 user=replication_user password=password'
primary_conninfo = 'host=db1 port=5432 user=replication_user password=password'

# start up the slave database
pg_ctl -D /data1 start


# it will return true
psql -c 'select pg_is_in_recovery();'


psql -c 'select * from pg_stat_wal_receiver;'


