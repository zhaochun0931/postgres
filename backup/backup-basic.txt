To back up and recover a PostgreSQL database, you can use built-in tools like pg_dump and pg_restore for logical backups, or pg_basebackup for physical backups.



1. Logical backup: pg_dump

pg_dump exports a database's contents into a file containing SQL commands. This method is flexible for moving data between different PostgreSQL versions, but can be slow for very large databases. 


How to back up
You can use pg_dump to create a backup file in a standard SQL format or a compressed, custom format. The custom format is more flexible and can be restored with pg_restore. 

Backup a single database to a custom compressed file 
pg_dump -Fc -U username -d dbname -f backup_file.dump

Use code with caution.

-F c: Specifies the custom archive format, which is compressed and allows for selective restoration.
-U username: Specifies the PostgreSQL user.
-d dbname: Specifies the database to back up.
-f backup_file.dump: Specifies the output file path. 



Backup all databases to a single SQL script
For backing up an entire database cluster (including roles and tablespaces), use pg_dumpall. 

pg_dumpall -U postgres > full_cluster_backup.sql








How to recover

You can restore a logical backup using either psql (for plain SQL files) or pg_restore (for custom, tar, or directory formats). 
Restore a custom backup file with pg_restore
Create an empty database on your PostgreSQL server where the data will be restored.

createdb -U postgres new_dbname


Run pg_restore to import the data into the new database.
pg_restore -Fc -U username -d new_dbname backup_file.dump






Restore a plain SQL file with psql
Create an empty database.

createdb -U postgres new_dbname


Execute the SQL script against the new database.

psql -U username -d new_dbname -f full_cluster_backup.sql





















2. Physical backup: pg_basebackup
Physical backups involve copying the database's data files at the file system level. When combined with Write-Ahead Log (WAL) archiving, this is the most robust method for disaster recovery, especially for large databases, and enables Point-in-Time Recovery (PITR). 

How to back up
The native tool for physical backups is pg_basebackup, which creates a consistent copy of the database cluster's files. 
Create a physical backup 


pg_basebackup -D /path/to/backup/dir -c fast -X fetch -P


-D /path/to/backup/dir: Specifies the directory where the backup will be stored.
-c fast: Creates the checkpoint as quickly as possible.
-X fetch: Includes the necessary WAL files in the backup.
-P: Reports progress during the backup. 





How to recover
Physical recovery is more complex, as it involves manually copying files and replaying WAL data.
Stop the PostgreSQL server.
Clear the old data directory to ensure a clean slate.

rm -rf /var/lib/postgresql/16/main/*


Copy the backup files into the main data directory.

cp -R /path/to/backup/dir/* /var/lib/postgresql/16/main/


Create a standby.signal file in the data directory to indicate that it is a standby server. You will also need to configure a recovery.conf file or similar settings to specify the WAL recovery options.

touch /var/lib/postgresql/16/main/standby.signal


Start the PostgreSQL server, which will begin recovering the data from the WAL files. 
