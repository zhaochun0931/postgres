PostgreSQL supports several partitioning strategies:

1. Range List
2. Hash Range Partitioning


Beyond traditional partitioning, PostgreSQL supports vertical and horizontal partitioning









CREATE TABLE sales (
    id serial,
    sale_date date NOT NULL,
    amount numeric NOT NULL,
    PRIMARY KEY (id, sale_date)  -- Include sale_date in the primary key
) PARTITION BY RANGE (sale_date);


# Create individual partitions

CREATE TABLE sales_jan PARTITION OF sales FOR VALUES FROM ('2025-01-01') TO ('2025-01-31');

CREATE TABLE sales_mar PARTITION OF sales FOR VALUES FROM ('2025-03-01') TO ('2025-03-31');



INSERT INTO sales (id, sale_date, amount) VALUES (1, '2025-01-15', 100);
INSERT INTO sales (id, sale_date, amount) VALUES (2, '2025-03-10', 150);
INSERT INTO sales (id, sale_date, amount) VALUES (3, '2025-03-19', 150);
INSERT INTO sales (id, sale_date, amount) VALUES (4, '2025-01-10', 150);
INSERT INTO sales (id, sale_date, amount) VALUES (5, '2025-03-06', 150);




mydatabase=# select * from sales_jan;
 id | sale_date  | amount
----+------------+--------
  1 | 2025-01-15 |    100
  4 | 2025-01-10 |    150
(2 rows)

mydatabase=# select * from sales_mar;
 id | sale_date  | amount
----+------------+--------
  2 | 2025-03-10 |    150
  3 | 2025-03-19 |    150
  5 | 2025-03-06 |    150
(3 rows)

mydatabase=#






Horizontal Partitioning involves dividing a table into multiple tables based on rows, typically using techniques similar to standard partitioning strategies.




Vertical Partitioning involves splitting a table into multiple tables based on columns.











-- Create the test_table
CREATE TABLE test_table (
    id SERIAL PRIMARY KEY,
    name TEXT,
    age INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



select count(*) from test_table;



-- Insert 1 million rows into test_table using generate_series
INSERT INTO test_table (name, age)
SELECT
    'name_' || gs,
    (gs % 100) + 18  -- age between 18 and 117
FROM generate_series(1, 1000000) gs;














-- Create partitioned tables
CREATE TABLE test_table_name (
    id SERIAL PRIMARY KEY,
    name TEXT
);

CREATE TABLE test_table_age (
    id INT PRIMARY KEY,
    age INT,
    created_at TIMESTAMP
);






-- Insert into the name partition
INSERT INTO test_table_name (id, name)
SELECT id, name FROM test_table;

-- Insert into the age/created_at partition
INSERT INTO test_table_age (id, age, created_at)
SELECT id, age, created_at FROM test_table;





EXPLAIN ANALYZE 
SELECT * FROM test_table WHERE age = 25;








DROP TABLE IF EXISTS test_table;
DROP TABLE IF EXISTS test_table_name;
DROP TABLE IF EXISTS test_table_age;














